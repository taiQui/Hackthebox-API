#!/usr/bin/python3
# coding:utf-8

# Author : taiQui

import requests,json,argparse,re
from os.path import isfile
from os import getcwd,getenv
import urllib3
urllib3.disable_warnings()

HOME = getenv('HOME')

def parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-n','--nb_machine',help="Active Machine number to print, default : all",default=-1,type=int)
    return parser.parse_args()

class Color:
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    UNDERLINE = '\033[4m'
    RESET = '\033[0m'
    ORANGE = '\033[33m'

def getCMD(cmd):
    command = cmd.split(' ')[0]
    args = cmd.split(' ')[1:]
    return command,args

def getContent(msg):
    box_pwn = "(?:.*)profile\/\d+\">(.*)<\/a> owned (.*) on <a(?:.*)profile\/(?:\d+)\">(.*)<\/a> <a(?:.*)"
    chall_pwn = "(?:.*)profile\/\d+\">(.*)<\/a> solved challenge <(?:.*)>(.*)<(?:.*)><(?:.*)> from <(?:.*)>(.*)<(?:.*)><(?:.*)"
    new_box_incoming =  "(?:.*)Get ready to spill some (?:.* blood .*! <.*>)(.*)<(?:.* available in <.*>)(.*)<(?:.*)><(?:.*)"
    new_box_out= "(?:.*)>(.*)<(?:.*) is mass-powering on! (?:.*)"
    vip_upgrade= "(?:.*)profile\/\d+\">(.*)<\/a> became a <(?:.*)><(?:.*)><(?:.*)> V.I.P <(?:.*)"
    new_people = "(?:.*)profile\/\d+\">(.*)<\/a> just joined! Be polite and say hi :\)</p>"
    speak = "(?:.*)profile\/\d+\">(.*)</a>(?:.*)</span>:(.*)</p>"
    respect = "(?:.*)profile\/\d+\">(.*)</a> gave <span class=\"text-warning\">(?:.*)profile\/\d+\">(.*)</a></p>"
    respect2 = "(?:.*)profile\/\d+\">(.*)</a> believes that (.*) is so pro! <span class=\"text-success\">\[ \+1 (.*)</p>"
    badge = "(?:.*)profile\/\d+\">(.*)</a> has been awarded the <span class=\"c-white\">(.*)</span> badge.</p>"
    reset = "(?:.*)profile\/\d+\">(.*)</a> issued a <span class=\"text-danger\">(.*)</span> on <span class=\"c-white\">(.*)</span> <span class=\"text-success\">\[(.*)\]</span> </p>"
    fortress = "(?:.*)profile\/\d+\">(.*)</a> got flag <span class=\"text-success\">(.*)</span> from <a href=\"https://www.hackthebox.eu/.*\">(.*)</a> <span class=\"c-white\"><i class=\"fab fa-fort-awesome\"></i> .*</a></p>"
    reset2 = "(?:.*)profile\/\d+\">(.*)</a> requested a <span class=\"text-danger\">reset</span> on <span class=\"c-white\">(.*)</span> <span class=\"text-success\">\[(.*)\]</span> \[Type <span class=\"c-white\">(.*)</span> <span class=\"text-success\">(.*)</span> within one minute to vote to cancel it.]</p>"

    # get = re.compile(box_pwn).findall(msg)
    # if len(get) > 0:
    #     return "{} owned {} on {}".format(get[0][0],get[0][1],get[0][2])
    # get = re.compile(chall_pwn).findall(msg)
    # if len(get) > 0:
    #     return "{} solved {} from {} category".format(get[0][0],get[0][1],get[0][2])
    # get = re.compile(new_box_incoming).findall(msg)
    # if len(get) > 0:
    #     return ' '.join(get)
    # get = re.compile(new_box_out).findall(msg)
    # if len(get) > 0:
    #     return ' '.join(get)
    # get = re.compile(vip_upgrade).findall(msg)
    # if len(get) > 0:
    #     return '{} just become V.I.P'.format(get[0])
    # get = re.compile(new_people).findall(msg)
    # if len(get) > 0:
    #     return "{} just joined the shoutbox".format(get[0])
    get = re.compile(speak).findall(msg)
    if len(get) > 0:
        return "{} : {}".format(get[0][0],get[0][1])
    # get = re.compile(respect).findall(msg)
    # if len(get) > 0:
    #     return "{} give respect to {}".format(get[0][0],get[0][1])
    # get = re.compile(respect2).findall(msg)
    # if len(get) > 0:
    #     return("{} give respect to {}".format(get[0][0],get[0][1]))
    # get = re.compile(badge).findall(msg)
    # if len(get) > 0:
    #     return "{} got {} badge !".format(get[0][0],get[0][1])
    get = re.compile(reset).findall(msg)
    if len(get) > 0:
        return "{} issued a {} on {} from [{}]".format(get[0][0],get[0][1],get[0][2],get[0][3])
    # get = re.compile(fortress).findall(msg)
    # if len(get) > 0:
    #     return "{} got flag {} from {}".format(get[0][0],get[0][1],get[0][2])
    get = re.compile(reset2).findall(msg)
    if len(get) > 0:
        return "{} ask for reset {} in [{}] type {} {} to cancel it".format(get[0][0],get[0][1],get[0][2],get[0][3],get[0][4])
    return None

class HTB:
    def __init__(self,API_KEY):
        self.api_key = API_KEY
        self.session = requests.Session()
        self.BOXS = None
        self.active = None

    def getAllBox(self,_number=None,_active=True):
        boxs = self.requests("https://www.hackthebox.eu/api/machines/get/all",_json=True)[::-1]
        owned = self.getOwned(_active=_active,_send=True)
        spawned = self.getSpawned(_send=True)
        toprint = len(boxs) if _number == None else _number
        BOX = []
        for i in range(toprint):
            tmp = {}
            user,root = HTB.isOwned(boxs[i]['id'],owned)
            if _active:
                if boxs[i]['retired'] == False:
                    BOX.append(self.box2dic(boxs[i],user=user,root=root,spawned=spawned))
            else:
                BOX.append(self.box2dic(boxs[i],user=user,root=root,spawned=spawned))
        self.BOXS = BOX
        self.active = _active
        return BOX

    def box2dic(self,r,user=None,root=None,spawned=None):
        tmp = {}
        tmp['name'] = r['name']
        tmp['os'] = r['os']
        tmp['ip'] = r['ip']
        tmp['id'] = r['id']
        tmp['rating'] = str(r['rating'])
        tmp['points'] = str(r['points'])
        tmp['user'] = str(r['user_owns'])
        tmp['root'] = str(r['root_owns'])
        if spawned != None:
            try:
                tmp['spawned'] = HTB.isUp(r['id'],spawned)
            except:
                tmp['spawned'] = None
        else:
            tmp['spawned'] = None
        if user:
            tmp['owned_user'] = True
        else:
            tmp['owned_user'] = False
        if root:
            tmp['owned_root'] = True
        else:
            tmp['owned_root'] = False
        # tmp['spawned'] = isUp(r['id'],spawned)
        return tmp

    def getSpawned(self,_send=False):
        r =  self.requests("https://www.hackthebox.eu/api/machines/spawned/",_json=True)
        try:
            if not _send:
                for box in r:
                    HTB.printBox(self.getBoxById(box['id'],_noprint=True))
            else:
                boxs = []
                for box in r:
                    boxs.append(box)
                return boxs
        except:
            return "[-] You are probably not VIP"
    @staticmethod
    def isOwned(id,owned):
        for box in owned:
            if id == box['id']:
                return box['owned_user'],box['owned_root']
        return None,None
    @staticmethod
    def isUp(id,spawned):
        for i in spawned:
            if i['id'] == id:
                return i['spawned']
        return False
    @staticmethod
    def rate2Color(point):
        if point == 20:
            return Color.GREEN+"[+]"+Color.RESET
        if point == 30:
            return Color.ORANGE+"[+]"+Color.RESET
        if point == 40:
            return Color.RED+"[+]"+Color.RESET
        else:
            return Color.WHITE+"[+]"+Color.RESET

    def getAssigned(self):
        return self.requests("https://www.hackthebox.eu/api/machines/assigned",_json=True)[0]['id']

    def getBetterRated(self,_active=True,_number=None):
        boxs = None
        if _active != self.active:
            boxs = self.getAllBox(_active=_active)
        else:
            boxs = self.BOXS if self.BOXS != None else self.getAllBox(_active=_active)
        newlist = sorted(boxs, key=lambda k: k['rating'])[::-1]
        print("="*(len("Best Rating")+4))
        print("  Best Rating")
        print("="*(len("Best Rating")+4))
        max = _number if _number != None  else 10
        for i in range(max):
            self.printBox(newlist[i])

    def getBoxByName(self,name,_active=False):
        boxs = None
        if _active != self.active:
            boxs = self.getAllBox(_active=_active)
        else:
            boxs = self.BOXS if self.BOXS != None else self.getAllBox(_active=_active)
        print("="*(len("  Result for {}".format(name))+4))
        print("  Result for {}".format(name))
        print("="*(len("  Result for {}".format(name))+4))
        for box in boxs:
            if box['name'].lower() == name.lower():
                HTB.printBox(box)
                return
    def getBoxById(self,id,_active=False,_noprint=False):
        boxs = None
        if _active != self.active:
            boxs = self.getAllBox(_active=_active)
        else:
            boxs = self.BOXS if self.BOXS != None else self.getAllBox(_active=_active)
        if not _noprint:
            print("="*(len("  Result for {}".format(id))+4))
            print("  Result for {}".format(id))
            print("="*(len("  Result for {}".format(id))+4))
        for box in boxs:
            if int(box['id']) == int(id):
                return box

    def getOwned(self,_active=True,_send=False):
        r = self.requests("https://www.hackthebox.eu/api/machines/owns",_json=True)
        if _send:
            return r
        for owned in r:
            HTB.printBox(self.getBoxById(owned['id'],_noprint=True))
    def getActiveNotOwned(self,_active=True):
        boxs = None
        if _active != self.active:
            boxs = self.getAllBox(_active=_active)
        else:
            boxs = self.BOXS if self.BOXS != None else self.getAllBox(_active=_active)
        r = self.requests("https://www.hackthebox.eu/api/machines/owns",_json=True)
        ids = [a['id'] for a in r]
        for box in boxs:
            if box['id'] not in ids:
                HTB.printBox(box)
            else:
                for owned in r:
                    if owned['id'] == box['id']:
                        if owned['owned_user'] ^ owned['owned_root']:
                            HTB.printBox(box)

    def getBoxByDifficulty(self,difficulty,_active=True,_number=None):
        boxs = None
        if _active != self.active:
            boxs = self.getAllBox(_active=_active)
        else:
            boxs = self.BOXS if self.BOXS != None else self.getAllBox(_active=_active)
        if not difficulty.isdigit():
            if difficulty.lower() in ['easy','ez','facile']:
                difficulty = 20
            elif difficulty.lower() in ['medium','moyen','normal']:
                difficulty = 30
            elif difficulty.lower() == "hard":
                difficulty = 40
            elif difficulty == "insane":
                difficulty = 50
            else:
                raise Exception("Difficulty not understood for {}".format(difficulty))
        print("="*(len("  Box with difficulty {}".format(difficulty))+4))
        print("  Box with difficulty {}".format(difficulty))
        print("="*(len("  Box with difficulty {}".format(difficulty))+4))
        max = _number if _number != None  else len(boxs)
        for i in range(len(boxs)):
            if int(boxs[i]['points']) == int(difficulty):
                HTB.printBox(boxs[i])
    @staticmethod
    def printBox(box):

        print(HTB.rate2Color(int(box['points']))+" {} (ID: {}{}{}) {}{}★{}".format(box['name'],Color.BLUE,box['id'],Color.RESET,box['rating'],Color.YELLOW,Color.RESET))
        print("    {} - {}{}{}".format(box['os'],Color.YELLOW,box['ip'],Color.RESET))
        user = ""
        root = ""
        if box['owned_user']:
            user = "{} U{}: {}".format(Color.GREEN,Color.RESET,box['user'])
        else:
            user = "{} U{}: {}".format(Color.RED,Color.RESET,box['user'])
        if box['owned_root']:
            root = "{} R{}: {}".format(Color.GREEN,Color.RESET,box['root'])
        else:
            root = "{} R{}: {}".format(Color.RED,Color.RESET,box['root'])
        if box['spawned']:
            print("    Points: {} | {}{}{} | {} | {}".format(box['points'],Color.GREEN,"\u25cf",Color.RESET,user,root))
        elif box['spawned'] == False:
            print("    Points: {} | {}{}{} | {} | {}".format(box['points'],Color.RED,"\u25cf",Color.RESET,user,root))
        else:
            print("    Points: {} | {} | {}".format(box['points'],user,root))

    def getBoxByOS(self,os,_active=True,_number=None):
        boxs = None
        if _active != self.active:
            boxs = self.getAllBox(_active=_active)
        else:
            boxs = self.BOXS if self.BOXS != None else self.getAllBox(_active=_active)
        print("="*(len("Searching for {} OS Boxs".format(os))+4))
        print("  Searching for {} OS Boxs".format(os))
        print("="*(len("Searching for {} OS Boxs".format(os))+4))
        max = _number if _number != None  else 30
        for i in range(len(boxs)):
            if boxs[i]['os'].lower() == os.lower():
                self.printBox(boxs[i])

    def setFlag(self,id,flag,difficulty=5,_name=None):
        if _name != None :
            id = self.getIdByName(_name)
            if id == -1:
                raise Exception('No box found for name {}'.format(_name))
        print(id)
        r = self.requests("https://www.hackthebox.eu/api/machines/own",method="POST",data={"flag":flag,"id":id,"difficulty":difficulty*10},_json=True)
        if r['success'] == '1':
            print("Nice Job !")
        else:
            print("Try again !")
    def reset(self,id,_name=None):
        if _name != None :
            id = self.getIdByName(_name)
            if id == -1:
                raise Exception('No box found for name {}'.format(_name))
        r = self.requests("https://www.hackthebox.eu/api/vm/reset/{}".format(id),method="POST",_json=True)
        if not int(r['success']):
            print("[-] Error reset : {}".format(r))
        else:
            print('{}. [{:d}/{:d}].'.format(r['output'], r['used'], r['total']))

    def start(self,id,_name=None):
        if _name != None :
            id = self.getIdByName(_name)
            if id == -1:
                raise Exception('No box found for name {}'.format(_name))
        r = self.requests("https://www.hackthebox.eu/api/vm/vip/assign/{}".format(id),method="POST",_json=True)
        print(r['status'])
        if "Incorrect lab type" in r['status']:
            print("You are probably not VIP")
        elif "You already have an active machine." in r['status']:
            print("Your current Active machine is :")
            HTB.printBox(htb.getBoxById(htb.getAssigned()))
    def stop(self,id,_name=None):
        if _name != None :
            id = self.getIdByName(_name)
            if id == -1:
                raise Exception('No box found for name {}'.format(_name))
        r = self.requests("https://www.hackthebox.eu/api/vm/vip/remove/{}".format(id),method="POST",_json=True)
        print(r['status'])
        if "Incorrect lab type" in r['status']:
            print("You are probably not VIP")

    def extend(self,id,_name=None):
        if _name != None :
            id = self.getIdByName(_name)
            if id == -1:
                raise Exception('No box found for name {}'.format(_name))
        r = self.requests("https://www.hackthebox.eu/api/vm/vip/extend/{}".format(id),method="POST",_json=True)
        print(r['status'])
        if "Incorrect lab type" in r['status']:
            print("You are probably not VIP")

    def getByFilter(self,OS,difficulty,_active=True):
        if not difficulty.isdigit():
            if difficulty.lower() in ['easy','ez','facile']:
                difficulty = 20
            elif difficulty.lower() in ['medium','moyen','normal']:
                difficulty = 30
            elif difficulty.lower() == "hard":
                difficulty = 40
            elif difficulty == "insane":
                difficulty = 50
            else:
                raise Exception("Difficulty not understood for {}".format(difficulty))
        boxs = None
        if _active != self.active:
            boxs = self.getAllBox(_active=_active)
        else:
            boxs = self.BOXS if self.BOXS != None else self.getAllBox(_active=_active)
        print("="*(len("OS : {}  | Difficulty : {}".format(OS,difficulty))+4))
        print("  Searching with filter")
        print("OS : {}  | Difficulty : {}".format(OS,difficulty))
        print("="*(len("OS : {}  | Difficulty : {}".format(OS,difficulty))+4))
        for box in boxs:
            if box['os'].lower() == OS and box['points'] == str(difficulty):
                HTB.printBox(box)


    def getIdByName(self,name,_active=False):
        boxs = None
        if _active != self.active:
            boxs = self.getAllBox(_active=_active)
        else:
            boxs = self.BOXS if self.BOXS != None else self.getAllBox(_active=_active)
        for box in boxs:
            if box['name'].lower() == name.lower():
                return box['id']
        return -1
    def shoutBox(self):
        import time
        cache = []
        print("="*(len("  Shoutbox")+4))
        print("  Shoutbox - Ctrl+c to leave")
        print("="*(len("  Shoutbox")+4))
        while True:
            try:
                r = self.requests("https://www.hackthebox.eu/api/shouts/get/initial/html/5",method="POST",_json=True)
                for msg in r['html']:
                    tmp = getContent(msg)
                    if tmp == None:
                        continue
                    if tmp not in cache:
                        if len(cache) <= 5:
                            cache.append(tmp)
                            print(" -> {}".format(tmp))
                        else:
                            cache = cache[1:]
                            cache.append(tmp)
                            print(" -> {}".format(tmp))
                time.sleep(1)
            except KeyboardInterrupt:
                print("[*] Type exit or quit to leave shoutbox, or a message to send to the shoutbox")
                tmp = input("$~ ")
                if tmp.lower() in ['exit','quit']:
                    return
                else:
                    if self.send2Shoutbox(tmp):
                        print("[+] Message Sent !")
    def getPersonnalInfo(self,name=None):
        # if name == None:
        #     name = input('Give your HTB name : ')
        name = ""
        r = self.requests("https://www.hackthebox.eu/api/user/profile",data={"username":name},_json=True)
        print(r)
        if r == "":
            print("No Users found for name : {}".format(name))
            return
        print("Username : {} - id : {}".format(r['username'],r['id']))
        print("Point : {} - User : {} - Root : {}".format(r['points'],r['userOwns'],r['rootOwns']))
        print('Rank : {}'.format(r['rank']))
        print('Profil URL : https://www.hackthebox.eu/home/users/profile/{}'.format(r['id']))


    def test(self):
        pass

    def send2Shoutbox(self,text):
        r = self.requests("https://www.hackthebox.eu/api/shouts/new",method="POST",data = { "text" : text },_json=True)
        return r['success'] == '1'
    def requests(self,url,method="GET",data=None,_json=False):
        head = {
                    'User-Agent'     : 'YOLO HTB',
                    'Authorization'  : 'Bearer {}'.format(self.api_key),
                    'Accept-Encoding': 'gzip, deflate',
                    'Accept'         : 'application/json',
                    'Connection'     : 'Close',
                }
        if method == "GET":
            if _json:
                r = self.session.get(url,headers=head,verify=False)

                if r.status_code == 401:
                    raise Exception("Bad API key")
                return r.json()
            r =  self.session.get(url,headers=head,verify=False)
            if r.status_code == 401:
                raise Exception("Bad API key")
            return r.text
        elif method == "POST":
            if _json:
                if data == None:
                    r =  self.session.post(url,headers=head,verify=False)
                    if r.status_code == 401:
                        raise Exception("Bad API key")
                    return r.json()
                else:
                    r = self.session.post(url,headers=head,data=data,verify=False)
                    if r.status_code == 401:
                        raise Exception("Bad API key")
                    return r.json()
            if data == None:
                r = self.session.post(url,headers=head,verify=False)
                if r.status_code == 401:
                    raise Exception('Bad API key')
                return r.text
            else:
                r = self.session.post(url,headers=head,data=data,verify=False)
                if r.status_code == 401:
                    raise Exception('Bad API key')
                return r.text



if __name__ == "__main__":
    args = parser()
    key = ""
    if not isfile(HOME+"/.htb_api.txt"):
        print("[+] First time using HackTheBox API")
        print("[+] Enter your API_key, it will be save in your Home directory")
        key = input("[+] Enter your key : ")
        with open(HOME+'/.htb_api.txt','w') as f:
            f.write(key)
    else:
        with open(HOME+'/.htb_api.txt','r') as f:
            key = f.read().replace('\n','')
    htb = HTB(key)
    htb.test()
    # htb.getPersonnalInfo()
    # exit()
    cmd = ""
    print("HTB Shell - put help to get info")
    cmd = input("{}$~{} ".format(Color.RED,Color.RESET))
    active = True
    number = 20
    while cmd.lower() != "exit" and cmd.lower() != "quit":
        try:
            command,args = getCMD(cmd)
            if command.lower() == "help":
                print("="*(len("HELP")+4))
                print("  HELP")
                print("="*(len("HELP")+4))
                print("\n{}start{} ID".format(Color.GREEN,Color.RESET))
                print("     Start Box")
                print("{}stop{} ID".format(Color.GREEN,Color.RESET))
                print("     Stop Box")
                print("{}extend{} ID".format(Color.GREEN,Color.RESET))
                print("     Extend Box time")
                print("{}reset{} ID".format(Color.GREEN,Color.RESET))
                print("     Reset Box")
                print("{}flag{} ID FLAG [DIFFICULTY 1-10]".format(Color.GREEN,Color.RESET))
                print("     Submit Flag")
                print("{}getboxs{}".format(Color.GREEN,Color.RESET))
                print("     Get all box")
                print("{}gbbo{} OS".format(Color.GREEN,Color.RESET))
                print("     Get Box by OS")
                print("{}gbbd{} difficulty (points)".format(Color.GREEN,Color.RESET))
                print("     Get Box by difficulty")
                print("{}gbbr{}".format(Color.GREEN,Color.RESET))
                print("     Get Box sorted by rating")
                print("{}getboxbyname{} NAME".format(Color.GREEN,Color.RESET))
                print("     Get Box by name")
                print("{}getowned{}".format(Color.GREEN,Color.RESET))
                print("     Get Box owned")
                print("{}getnotowned{}".format(Color.GREEN,Color.RESET))
                print("     Get Active box not owned yet")
                print("{}getspawned{}".format(Color.GREEN,Color.RESET))
                print("     Get spawned box")
                print("{}shoutbox{}".format(Color.GREEN,Color.RESET))
                print("     Listen the shoutbox, permit to send to the shoutbox too")
                print("{}profile{} name".format(Color.GREEN,Color.RESET))
                print("     Get profile by name")
                print("{}getbyfilter{} OS difficulty".format(Color.GREEN,Color.RESET))
                print("     Get Box by some filter")
                print("{}setActive{}".format(Color.GREEN,Color.RESET))
                print("     Inverse active values, if you want or not get only active box from research ")
                print("{}setNumber{} number".format(Color.GREEN,Color.RESET))
                print("     Put the Box's number to print - default all active or 20")
                print(Color.YELLOW+"ID"+Color.BLUE+" can be ID number or Box name")
                print(Color.YELLOW+"Difficulty "+Color.BLUE+"for getboxbydifficulty can be Number or strings like \"easy\""+Color.RESET)
            elif command.lower() == "setactive":
                if active:
                    active = False
                    print("[+] Active variable set to False")
                else:
                    active = True
                    print("[+] Active variable set to True")
            elif command.lower() == "setnumber":
                if len(args) == 0:
                    print("[-] No args set to 20 by default")
                    number = 20
                else:
                    if not args[0].isdigit():
                        print("[-] Args value error, set to 20 by default")
                        number = 20
                    else:
                        print("[+] Number set to {}".format(args[0]))
                        number = int(args[0])
            elif command.lower() == "start":
                if args[0].isdigit():
                    htb.start(args[0])
                else:
                    htb.start(args[0],_name=args[0])
            elif command.lower() == "stop":
                if args[0].isdigit():
                    htb.stop(args[0])
                else:
                    htb.stop(args[0],_name=args[0])
            elif command.lower() == "extend":
                if args[0].isdigit():
                    htb.extend(args[0])
                else:
                    htb.extend(args[0],_name=args[0])
            elif command.lower() == "reset":
                if args[0].isdigit():
                    htb.reset(args[0])
                else:
                    htb.reset(args[0],_name=args[0])
            elif command.lower() == "flag":
                difficulty = 5
                if len(args) < 3:
                    difficulty = 5
                else:
                    if args[2].isdigit():
                        if int(difficulty) <= 0 or int(difficulty) > 10:
                            print("Difficulty not valid for {} - set to 5 by default".format(difficulty))
                            difficulty = 5
                        else:
                            difficulty = int(args[2])
                    else:
                        print("Difficulty not valid for {} - Set to 5 by default".format(difficulty))
                        difficulty = 5
                if args[0].isdigit():
                    htb.setFlag(args[0],args[1],difficulty=difficulty)
                else:
                    htb.setFlag(args[0],args[1],difficulty=difficulty,_name=args[0])
            elif command.lower() == "getboxs":
                print("="*(len("  All Box")+4))
                print("  All Box")
                print("="*(len("  All Box")+4))
                for i in htb.getAllBox(_number=number,_active=active):
                    HTB.printBox(i)
            elif command.lower() == "gbbo":
                if len(args) == 0:
                    print("[-] Syntax error : gbbo OS")
                else:
                    htb.getBoxByOS(args[0],_number=number,_active=active)
            elif command.lower() == "gbbd":
                if len(args) == 0:
                    print("[-] Syntax error : gbbd difficulty")
                else:
                    htb.getBoxByDifficulty(args[0],_number=number,_active=active)
            elif command.lower() == "gbbr":
                htb.getBetterRated(_active=active,_number=number)
            elif command.lower() == "getboxbyname":
                if len(args) == 0:
                    print('[-] Syntax error getboxbyname NAME')
                else:
                    htb.getBoxByName(args[0])
            elif command.lower() == "getowned":
                htb.getOwned(_active=active,_send=False)
            elif command.lower() == "getnotowned":
                htb.getActiveNotOwned()
            elif command.lower() == "getspawned":
                htb.getSpawned()
            elif command.lower() == "shoutbox":
                htb.shoutBox()
            elif command.lower() == "getbyfilter":
                if len(args) != 2:
                    print("[-] Syntaxe error : getbyfilter OS difficulty")
                else:
                    htb.getByFilter(args[0],args[1],_active=active)
            elif command.lower() == "profile":
                if len(args) >= 1:
                    htb.getPersonnalInfo(name=args[0])
                else:
                    htb.getPersonnalInfo()
            else:
                print("[-] Command not found")

        except Exception as e:
            print("Error in command: {}".format(e))
            # raise(e)
        cmd = input("{}$~{} ".format(Color.RED,Color.RESET))
    # a.getBoxByDifficulty("e,_active=False)
